/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/foobarprogacct/testoperator/pkg/apis/test.istio/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TestIstioOperatorLister helps list TestIstioOperators.
// All objects returned here must be treated as read-only.
type TestIstioOperatorLister interface {
	// List lists all TestIstioOperators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.TestIstioOperator, err error)
	// TestIstioOperators returns an object that can list and get TestIstioOperators.
	TestIstioOperators(namespace string) TestIstioOperatorNamespaceLister
	TestIstioOperatorListerExpansion
}

// testIstioOperatorLister implements the TestIstioOperatorLister interface.
type testIstioOperatorLister struct {
	indexer cache.Indexer
}

// NewTestIstioOperatorLister returns a new TestIstioOperatorLister.
func NewTestIstioOperatorLister(indexer cache.Indexer) TestIstioOperatorLister {
	return &testIstioOperatorLister{indexer: indexer}
}

// List lists all TestIstioOperators in the indexer.
func (s *testIstioOperatorLister) List(selector labels.Selector) (ret []*v1.TestIstioOperator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TestIstioOperator))
	})
	return ret, err
}

// TestIstioOperators returns an object that can list and get TestIstioOperators.
func (s *testIstioOperatorLister) TestIstioOperators(namespace string) TestIstioOperatorNamespaceLister {
	return testIstioOperatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TestIstioOperatorNamespaceLister helps list and get TestIstioOperators.
// All objects returned here must be treated as read-only.
type TestIstioOperatorNamespaceLister interface {
	// List lists all TestIstioOperators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.TestIstioOperator, err error)
	// Get retrieves the TestIstioOperator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.TestIstioOperator, error)
	TestIstioOperatorNamespaceListerExpansion
}

// testIstioOperatorNamespaceLister implements the TestIstioOperatorNamespaceLister
// interface.
type testIstioOperatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TestIstioOperators in the indexer for a given namespace.
func (s testIstioOperatorNamespaceLister) List(selector labels.Selector) (ret []*v1.TestIstioOperator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TestIstioOperator))
	})
	return ret, err
}

// Get retrieves the TestIstioOperator from the indexer for a given namespace and name.
func (s testIstioOperatorNamespaceLister) Get(name string) (*v1.TestIstioOperator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("testistiooperator"), name)
	}
	return obj.(*v1.TestIstioOperator), nil
}
